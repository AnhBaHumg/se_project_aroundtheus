!function(){"use strict";class e{constructor(e,t,s,r,o,i){this._name=e.name,this._link=e.link,this._cardID=e.cardID,this._id=e._id,this._isLiked=e.isLiked,this.cardData=i,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteSubmit=r,this._handleLikeClick=o}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",this._handleLikeIcon),this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardTrash.addEventListener("click",(()=>{this._handleDeleteSubmit(this._id,this)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}isLiked(){return this.isLiked}_setLikes(){this._isLiked?this._likeButton.classList.add("card__like-button-active"):this._likeButton.classList.remove("card__like-button-active")}handleDeleteSubmit(){const e=this.cardData;handleDeleteButton(e)}_handleLikeIcon=()=>{this._likeButton.classList.toggle("card__like-button-active")};_handleDeleteCard=()=>{this._element.remove(),this._element=null};getView(){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._cardTrash=this._element.querySelector(".card__trash-button"),this._cardImageEl=this._element.querySelector(".card__image"),this._cardImageEl.src=this._link,this._cardImageEl.alt=`Photo of ${this._name}`,this._element.querySelector(".card__name").textContent=this._name,this._setEventListeners(),this._element}getID(){return this._id()}}class t{constructor(e,t){this._formEl=e,this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._submitButton=this._formEl.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}changeButtonState(){let e=!1;this._inputElements.forEach((t=>{t.validity.valid||(e=!0)})),e?this._disableButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputElements=Array.from(this._formEl.querySelectorAll(this._inputSelector)),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkValidity(e),this.changeButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault(),this._disableButton()})),this._setEventListeners()}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()}))}}class r extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputEls=[...this._popupForm.querySelectorAll(".modal__input")],this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}setEventListeners(){this._popupElement.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}setLoading(e){this._submitButton.textContent=e?"loading...":this._submitButtonText}renderLoading(){const e=document.createElement("img");return e.src=imageSrc,e}loadImage(){this.image=image,this._popupForm.append(image)}}class o{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(`.${t}`)}renderItems(){this._items.forEach(this._renderer)}addItem(e){this._container.prepend(e)}}const i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},n=document.querySelector("#add-card-modal").querySelector(".modal__form"),a=document.querySelector("#profile-edit-modal"),l={cardListEl:document.querySelector(".cards__list"),addCardForm:document.querySelector("#add-card-form"),profileEditButton:document.querySelector("#profile-edit-button"),profileCloseButton:"#profile-close-button",addCardCloseButton:"#addcard-close-button",profileTitle:document.querySelector(".profile__title"),profileDescription:document.querySelector(".profile__description"),addNewCardButton:document.querySelector(".profile__add-button"),profileTitleInput:document.querySelector("#profile-title-input"),profileDescriptionInput:document.querySelector("#profile-description-input"),cardTitleInput:"#title-card-input",cardUrlInput:"#url-image-input",popupModal:document.querySelector("#image-popup"),popupImage:"#modal-image-popup",popupTitle:"#modal-title-popup",popupImageModalClose:document.querySelector("#image-popup-close-button")},c=new class{constructor(e){this.url=e.baseUrl,this.headers=e.headers}getInitialCards(){return fetch(`${this.url}/cards`,{headers:{authorization:"a5172d76-7206-4bb6-b609-2e8e17b83724"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch("https://around-api.en.tripleten-services.com/v1/users/me",{method:"GET",headers:{authorization:"a5172d76-7206-4bb6-b609-2e8e17b83724","Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateUserProfile(e){return fetch("https://around-api.en.tripleten-services.com/v1/users/me",{method:"PATCH",headers:{authorization:"a5172d76-7206-4bb6-b609-2e8e17b83724","Content-Type":"application/json"},body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}updateAvatar(e){return fetch("https://around-api.en.tripleten-services.com/v1/users/me/avatar",{method:"PATCH",headers:{authorization:"a5172d76-7206-4bb6-b609-2e8e17b83724","Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}getCards(e,t,s){return fetch("https://around-api.en.tripleten-services.com/v1/cards",{method:"GET",headers:{name:e,link:t,_id:s,authorization:"a5172d76-7206-4bb6-b609-2e8e17b83724","Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}addCard(e){let{name:t,link:s}=e;return fetch("https://around-api.en.tripleten-services.com/v1/cards",{method:"POST",headers:{authorization:"a5172d76-7206-4bb6-b609-2e8e17b83724","Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}deleteCard(e){return fetch(`${this.url}/cards/${e}`,{method:"DELETE",headers:{authorization:"a5172d76-7206-4bb6-b609-2e8e17b83724","Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}likeCard(e){return fetch(`${this.url}/cards/${e}/likes`,{method:"PUT",headers:{authorization:"a5172d76-7206-4bb6-b609-2e8e17b83724","Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}dislikeCard(e){return fetch(`${this.url}/cards/${e}/likes`,{method:"DELETE",headers:{authorization:"a5172d76-7206-4bb6-b609-2e8e17b83724"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a5172d76-7206-4bb6-b609-2e8e17b83724","Content-Type":"application/json"}});function d(e){E.open(e)}function u(t){const s=new e(t,"#card-template",d,C,m).getView();b.addItem(s)}const h=new t(a,i),p=new t(n,i);function m(e){e.isLiked?c.dislikeCard(e._id).then((()=>{e.handleLikeButton()})).catch((e=>console.error(e))):c.likeCard(e._id).then((()=>{e.handleLikeButton()})).catch((e=>console.error(e)))}h.enableValidation(),p.enableValidation(),k.setEventListeners();const _=new r("#profile-edit-modal",(function(e){_.setLoading(!0),c.updateUserProfile(userData).then((()=>{f.setUserInfo(e.name,e.description),_.close()})).catch((e=>{console.error(e)})).finally((()=>{_.setLoading(!1)}))}));_.setEventListeners(),l.profileEditButton.addEventListener("click",(function(){const e=f.getUserInfo();l.profileTitleInput.value=e.name,l.profileDescriptionInput.value=e.description,_.open()})),l.addNewCardButton.addEventListener("click",(function(){k.open()}));const E=new class extends s{constructor(e){super({popupSelector:e}),this._popupImage=this._popupElement.querySelector(".modal__image-popup"),this._popupTitle=this._popupElement.querySelector(".modal__title-popup")}open(e){let{name:t,link:s}=e;this._popupImage.src=s,this._popupImage.alt=t,this._popupTitle.textContent=t,super.open()}}("#image-popup");let b;E.setEventListeners(),c.getInitialCards().then((e=>{b=new o({items:e,renderer:e=>{const t=u(e);b.addItem(t)}},selectors.cardSection),b.renderItems()})).catch((e=>{console.error(e)})),c.getUserInfo().then((e=>{f.setUserInfo(e.name,e.about),f.setAvatar(e.avatar)})).catch((e=>{console.error(e)}));const f=new class{constructor(e,t,s){this._titleElement=document.querySelector(e),this._descriptionElement=document.querySelector(t),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._titleElement.textContent,description:this._descriptionElement.textContent}}setUserInfo(e,t){this._titleElement.textContent=e,this._descriptionElement.textContent=t}setAvatar(e){this._avatarElement.src=e}}(".profile__title",".profile__description",".profile__image"),v=new class extends s{constructor(e){super(e),this._popupForm=this._popupElement.querySelector(".modal__form")}_setConfirmation(e){this._setConfirmation=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._setConfirmation(e)}))}}(selectors.deleteCardPopup);function C(e,t){v.open(),v.setSubmitAction((()=>{c.deleteCard(e).then((()=>{t.removeCard(),v.close()})).catch((e=>{console.log(e)})).finally((()=>{}))}))}v.setEventListeners();const L=new r("#profile-image-modal",(e=>{L.setLoading(!0),c.updateAvatar(e.link).then((e=>{f.setAvatar(e.avatar),L.close()})).catch((e=>{console.error(e)})).finally((()=>{L.setLoading(!1)}))}));document.querySelector("#profile-edit-button").addEventListener("click",(()=>{L.open()})),L.setEventListeners();const k=new r("#add-card-modal",(function(e){k.setLoading(!0),c.addCard(e).then((e=>{const t=u(e);b.addItem(t),k.close()})).catch((e=>{console.error(e)})).finally((()=>{k.setLoading(!1)}))}));k.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q2FyZC4uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3RvcihkYXRhLCBjYXJkU2VsZWN0b3IsIGhhbmRsZUltYWdlQ2xpY2ssIGhhbmRsZURlbGV0ZVN1Ym1pdCwgaGFuZGxlTGlrZUNsaWNrLCBjYXJkRGF0YSkge1xyXG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9jYXJkSUQgPSBkYXRhLmNhcmRJRDtcclxuICAgIHRoaXMuX2lkID0gZGF0YS5faWQ7XHJcbiAgICB0aGlzLl9pc0xpa2VkID0gZGF0YS5pc0xpa2VkO1xyXG4gICAgdGhpcy5jYXJkRGF0YSA9IGNhcmREYXRhO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayA9IGhhbmRsZUltYWdlQ2xpY2s7XHJcbiAgICB0aGlzLl9oYW5kbGVEZWxldGVTdWJtaXQgPSBoYW5kbGVEZWxldGVTdWJtaXQ7XHJcbiAgICB0aGlzLl9oYW5kbGVMaWtlQ2xpY2sgPSBoYW5kbGVMaWtlQ2xpY2s7XHJcbiAgfVxyXG5cclxuICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICByZXR1cm4gY2FyZEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAvLy5jYXJkX19saWtlLWJ1dHRvblxyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5faGFuZGxlTGlrZUljb24pO1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVMaWtlQ2xpY2sodGhpcyk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgLy8uY2FyZF9fdHJhc2gtYnV0dG9uXHJcbiAgICB0aGlzLl9jYXJkVHJhc2guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlRGVsZXRlU3VibWl0KHRoaXMuX2lkLCB0aGlzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vLmNhcmRfX2ltYWdlXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrKHsgbmFtZTogdGhpcy5fbmFtZSwgbGluazogdGhpcy5fbGluayB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaXNMaWtlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLmlzTGlrZWQ7XHJcbiAgfVxyXG5cclxuICBfc2V0TGlrZXMoKSB7XHJcbiAgICBpZiAodGhpcy5faXNMaWtlZCkge1xyXG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlLWJ1dHRvbi1hY3RpdmVcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJjYXJkX19saWtlLWJ1dHRvbi1hY3RpdmVcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYW5kbGVEZWxldGVTdWJtaXQoKSB7XHJcbiAgICBjb25zdCBjYXJkSUQgPSB0aGlzLmNhcmREYXRhO1xyXG4gICAgaGFuZGxlRGVsZXRlQnV0dG9uKGNhcmRJRCk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlTGlrZUljb24gPSAoKSA9PiB7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoXCJjYXJkX19saWtlLWJ1dHRvbi1hY3RpdmVcIik7XHJcbiAgfTtcclxuICBfaGFuZGxlRGVsZXRlQ2FyZCA9ICgpID0+IHtcclxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldFZpZXcoKSB7XHJcbiAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIik7XHJcbiAgICB0aGlzLl9jYXJkVHJhc2ggPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdHJhc2gtYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlRWwgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICAvL2dldCB0aGUgY2FyZCB2aWV3XHJcbiAgICBcclxuICAgIHRoaXMuX2NhcmRJbWFnZUVsLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbC5hbHQgPSBgUGhvdG8gb2YgJHt0aGlzLl9uYW1lfWA7XHJcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbmFtZVwiKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgICAvL3NldCBldmVudCBsaXN0ZW5lcnNcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAvL3JldHVybiB0aGUgY2FyZFxyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgfVxyXG4gIGdldElEKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lkKCk7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihmb3JtRWwsIGNvbmZpZykge1xyXG4gICAgICB0aGlzLl9mb3JtRWwgPSBmb3JtRWw7XHJcbiAgICAgIHRoaXMuX2Zvcm1TZWxlY3RvciA9IGNvbmZpZy5mb3JtU2VsZWN0b3I7XHJcbiAgICAgIHRoaXMuX2lucHV0U2VsZWN0b3IgPSBjb25maWcuaW5wdXRTZWxlY3RvcjtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBjb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgICAgdGhpcy5faW5wdXRFcnJvckNsYXNzID0gY29uZmlnLmlucHV0RXJyb3JDbGFzcztcclxuICAgICAgdGhpcy5fZXJyb3JDbGFzcyA9IGNvbmZpZy5lcnJvckNsYXNzO1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmApO1xyXG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7IFxyXG4gICAgICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTsgXHJcbiAgICAgICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmApO1xyXG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7IFxyXG4gICAgICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpOyBcclxuICAgICAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSAnJzsgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIF9jaGVja1ZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xyXG4gICAgICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIF9kaXNhYmxlQnV0dG9uKCkge1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNoYW5nZUJ1dHRvblN0YXRlKCkge1xyXG4gICAgICAgIGxldCBmb3VuZEludmFsaWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9pbnB1dEVsZW1lbnRzLmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgZm91bmRJbnZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChmb3VuZEludmFsaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGlzYWJsZUJ1dHRvbigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX2lucHV0RWxlbWVudHMgPSBBcnJheS5mcm9tKHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpKTtcclxuICAgICAgICB0aGlzLl9pbnB1dEVsZW1lbnRzLmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VCdXR0b25TdGF0ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9mb3JtRWwuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdGhpcy5fZGlzYWJsZUJ1dHRvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3J9KSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgb3BlbigpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIF9oYW5kbGVFc2NDbG9zZSA9IChldnQpID0+IHtcclxuICAgICAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxcIikgfHxcclxuICAgICAgICAgICAgZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9fY2xvc2VcIikpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFBvcHVwIGZyb20gJy4vUG9wdXAuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgICAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgICAgICAgdGhpcy5faW5wdXRFbHMgPSBbLi4udGhpcy5fcG9wdXBGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpXTtcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblRleHQgPSB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICAgICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB7fTtcclxuICAgICAgICB0aGlzLl9pbnB1dEVscy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgICAgIGlucHV0VmFsdWVzW2lucHV0RWxlbWVudC5uYW1lXSA9IGlucHV0RWxlbWVudC52YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHNldExvYWRpbmcoaXNMb2FkaW5nKSB7XHJcbiAgICAgICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcImxvYWRpbmcuLi5cIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSB0aGlzLl9zdWJtaXRCdXR0b25UZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJMb2FkaW5nKCkge1xyXG4gICAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICAgICAgaW1nLnNyYyA9IGltYWdlU3JjO1xyXG4gICAgICAgIHJldHVybiBpbWc7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZEltYWdlKCkge1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBpbWFnZTtcclxuICAgICAgICB0aGlzLl9wb3B1cEZvcm0uYXBwZW5kKGltYWdlKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgICAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7Y29udGFpbmVyU2VsZWN0b3J9YCk7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJdGVtcygpIHtcclxuICAgICAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKHRoaXMuX3JlbmRlcmVyKTtcclxuICAgIH1cclxuICBcclxuICAgIGFkZEl0ZW0oZWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJZb3NlbWl0ZSBWYWxsZXlcIixcclxuICAgICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3lvc2VtaXRlLmpwZ1wiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxyXG4gICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFrZS1sb3Vpc2UuanBnXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXHJcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9iYWxkLW1vdW50YWlucy5qcGdcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiTGF0ZW1hclwiLFxyXG4gICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGF0ZW1hci5qcGdcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXHJcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC92YW5vaXNlLmpwZ1wiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4gICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFnby5qcGdcIixcclxuICAgIH0sXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xyXG4gICAgZm9ybVNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybVwiLFxyXG4gICAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX2J1dHRvblwiLFxyXG4gICAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICAgIGVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yX3Zpc2libGVcIixcclxufTtcclxuZXhwb3J0IGNvbnN0IGFkZENhcmRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLWNhcmQtbW9kYWxcIik7XHJcbmV4cG9ydCBjb25zdCBjYXJkRm9ybSA9IGFkZENhcmRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUVkaXRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1lZGl0LW1vZGFsXCIpO1xyXG5leHBvcnQgY29uc3QgdmFyaWFibGUgPSB7XHJcbi8vV3JhcHBlcnNcclxuY2FyZExpc3RFbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fbGlzdFwiKSxcclxuYWRkQ2FyZEZvcm06IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLWNhcmQtZm9ybVwiKSxcclxuXHJcblxyXG5cclxuXHJcbi8vQnV0dG9ucyBhbmQgb3RoZXIgRG9tIG5vZGVzXHJcbnByb2ZpbGVFZGl0QnV0dG9uOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1idXR0b25cIiksXHJcbnByb2ZpbGVDbG9zZUJ1dHRvbjogXCIjcHJvZmlsZS1jbG9zZS1idXR0b25cIixcclxuYWRkQ2FyZENsb3NlQnV0dG9uOiBcIiNhZGRjYXJkLWNsb3NlLWJ1dHRvblwiLFxyXG5wcm9maWxlVGl0bGU6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fdGl0bGVcIiksXHJcbnByb2ZpbGVEZXNjcmlwdGlvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19kZXNjcmlwdGlvblwiKSxcclxuYWRkTmV3Q2FyZEJ1dHRvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpLFxyXG5cclxuLy9Gb3JtIGRhdGFcclxucHJvZmlsZVRpdGxlSW5wdXQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS10aXRsZS1pbnB1dFwiKSxcclxucHJvZmlsZURlc2NyaXB0aW9uSW5wdXQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1kZXNjcmlwdGlvbi1pbnB1dFwiKSxcclxuXHJcbmNhcmRUaXRsZUlucHV0OiBcIiN0aXRsZS1jYXJkLWlucHV0XCIsXHJcbmNhcmRVcmxJbnB1dDogXCIjdXJsLWltYWdlLWlucHV0XCIsXHJcblxyXG4vL0ltbWFnZSBwb3B1cFxyXG5wb3B1cE1vZGFsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2ltYWdlLXBvcHVwXCIpLFxyXG5wb3B1cEltYWdlOiBcIiNtb2RhbC1pbWFnZS1wb3B1cFwiLFxyXG5wb3B1cFRpdGxlOiBcIiNtb2RhbC10aXRsZS1wb3B1cFwiLFxyXG5wb3B1cEltYWdlTW9kYWxDbG9zZTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNpbWFnZS1wb3B1cC1jbG9zZS1idXR0b25cIiksXHJcblxyXG59IiwiaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC4uanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IHsgQXBpIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhDb25maXJtYXRpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uXCI7XHJcbmltcG9ydCB7XHJcbiAgaW5pdGlhbENhcmRzLFxyXG4gIGNvbmZpZyxcclxuICB2YXJpYWJsZSxcclxuICBjYXJkRm9ybSxcclxuICBwcm9maWxlRWRpdE1vZGFsXHJcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5cclxuY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxyXG4gIGhlYWRlcnM6IHtcclxuICAgIGF1dGhvcml6YXRpb246IFwiYTUxNzJkNzYtNzIwNi00YmI2LWI2MDktMmU4ZTE3YjgzNzI0XCIsXHJcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICB9LFxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUltYWdlQ2xpY2soY2FyZERhdGEpIHtcclxuICBwb3B1cFdpdGhJbWFnZS5vcGVuKGNhcmREYXRhKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQ2FyZChpdGVtKSB7XHJcbiAgY29uc3QgY2FyZEVsZW1lbnQgPSBuZXcgQ2FyZChpdGVtLCBcIiNjYXJkLXRlbXBsYXRlXCIsIGhhbmRsZUltYWdlQ2xpY2ssIGhhbmRsZURlbGV0ZUJ1dHRvbiwgaGFuZGxlTGlrZUNsaWNrKTtcclxuICByZXR1cm4gY2FyZEVsZW1lbnQuZ2V0VmlldygpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckNhcmQoY2FyZERhdGEpIHtcclxuICBjb25zdCBjYXJkID0gY3JlYXRlQ2FyZChjYXJkRGF0YSk7XHJcbiAgY2FyZFNlY3Rpb24uYWRkSXRlbShjYXJkKTtcclxufVxyXG5cclxuXHJcbi8vRm9ybVZhbGlkYXRvclxyXG5jb25zdCBwcm9maWxlRWRpdE1vZGFsRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHByb2ZpbGVFZGl0TW9kYWwsY29uZmlnKTtcclxuY29uc3QgY2FyZEZvcm1Gb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoY2FyZEZvcm0sIGNvbmZpZyk7XHJcblxyXG5wcm9maWxlRWRpdE1vZGFsRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbmNhcmRGb3JtRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4vL0xpa2VDYXJkXHJcbmZ1bmN0aW9uIGhhbmRsZUxpa2VDbGljayhjYXJkKSB7XHJcbiAgaWYgKGNhcmQuaXNMaWtlZCkge1xyXG4gICAgYXBpXHJcbiAgICAuZGlzbGlrZUNhcmQoY2FyZC5faWQpXHJcbiAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgIGNhcmQuaGFuZGxlTGlrZUJ1dHRvbigpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmVycm9yKGVycikpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBhcGlcclxuICAgIC5saWtlQ2FyZChjYXJkLl9pZClcclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgY2FyZC5oYW5kbGVMaWtlQnV0dG9uKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XHJcbiAgfVxyXG59XHJcblxyXG4vL1BvcHVwV2l0aEZvcm1cclxuXHJcbmZ1bmN0aW9uIG9wZW5BZGRGb3JtKCkge1xyXG4gIGNhcmRQb3B1cC5vcGVuKCk7XHJcbn1cclxuXHJcbmNhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgZWRpdFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjcHJvZmlsZS1lZGl0LW1vZGFsXCIsXHJcbiAgaGFuZGxlUHJvZmlsZUVkaXRTdWJtaXRcclxuKTtcclxuXHJcbmZ1bmN0aW9uIG9wZW5FZGl0Rm9ybSgpIHtcclxuICBjb25zdCB1c2VyID0gdXNlckluZm8uZ2V0VXNlckluZm8oKTtcclxuICB2YXJpYWJsZS5wcm9maWxlVGl0bGVJbnB1dC52YWx1ZSA9IHVzZXIubmFtZTtcclxuICB2YXJpYWJsZS5wcm9maWxlRGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IHVzZXIuZGVzY3JpcHRpb247XHJcbiAgZWRpdFBvcHVwLm9wZW4oKTtcclxufVxyXG5cclxuZWRpdFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5cclxudmFyaWFibGUucHJvZmlsZUVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9wZW5FZGl0Rm9ybSk7XHJcblxyXG52YXJpYWJsZS5hZGROZXdDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvcGVuQWRkRm9ybSk7IFxyXG5cclxuLy9Qb3B1cFdpdGhJbWFnZVxyXG5cclxuY29uc3QgcG9wdXBXaXRoSW1hZ2UgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXCIjaW1hZ2UtcG9wdXBcIik7XHJcbnBvcHVwV2l0aEltYWdlLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vL1NlY3Rpb25cclxubGV0IGNhcmRTZWN0aW9uO1xyXG5cclxuYXBpXHJcbi5nZXRJbml0aWFsQ2FyZHMoKVxyXG4gIC50aGVuKChyZXMpID0+IHtcclxuICAgIGNhcmRTZWN0aW9uID0gbmV3IFNlY3Rpb24oe1xyXG4gICAgICBpdGVtczogcmVzLFxyXG4gICAgICByZW5kZXJlcjogKGRhdGEpID0+IHtcclxuICAgICAgICBjb25zdCBjYXJkID0gcmVuZGVyQ2FyZChkYXRhKTtcclxuICAgICAgICBjYXJkU2VjdGlvbi5hZGRJdGVtKGNhcmQpO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHNlbGVjdG9ycy5jYXJkU2VjdGlvbik7XHJcbiAgICBjYXJkU2VjdGlvbi5yZW5kZXJJdGVtcygpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICB9KTtcclxuYXBpXHJcbi5nZXRVc2VySW5mbygpXHJcbiAgLnRoZW4oKGlucHV0VmFsdWVzKSA9PiB7XHJcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyhpbnB1dFZhbHVlcy5uYW1lLCBpbnB1dFZhbHVlcy5hYm91dCk7XHJcbiAgICB1c2VySW5mby5zZXRBdmF0YXIoaW5wdXRWYWx1ZXMuYXZhdGFyKTtcclxuICB9KVxyXG4gIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgfSk7XHJcblxyXG4vL1VzZXJJbmZvXHJcblxyXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyhcIi5wcm9maWxlX190aXRsZVwiLCBcIi5wcm9maWxlX19kZXNjcmlwdGlvblwiLCBcIi5wcm9maWxlX19pbWFnZVwiKTtcclxuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUVkaXRTdWJtaXQoaW5wdXRWYWx1ZXMpIHtcclxuICBlZGl0UG9wdXAuc2V0TG9hZGluZyh0cnVlKTtcclxuICBhcGkudXBkYXRlVXNlclByb2ZpbGUodXNlckRhdGEpLnRoZW4oKCkgPT4ge1xyXG4gICAgdXNlckluZm8uc2V0VXNlckluZm8oaW5wdXRWYWx1ZXMubmFtZSwgaW5wdXRWYWx1ZXMuZGVzY3JpcHRpb24pO1xyXG4gICAgZWRpdFBvcHVwLmNsb3NlKCk7XHJcbiAgfSlcclxuICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gIH0pXHJcbiAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgZWRpdFBvcHVwLnNldExvYWRpbmcoZmFsc2UpO1xyXG4gIH0pO1xyXG59XHJcblxyXG4vL1BvcHVwV2l0aENvbmZpcm1hdGlvblxyXG5cclxuY29uc3QgZGVsZXRlQ2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aENvbmZpcm1hdGlvbihzZWxlY3RvcnMuZGVsZXRlQ2FyZFBvcHVwKTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZUJ1dHRvbihjYXJkSUQsIGNhcmQpIHtcclxuICBkZWxldGVDYXJkUG9wdXAub3BlbigpO1xyXG4gIGRlbGV0ZUNhcmRQb3B1cC5zZXRTdWJtaXRBY3Rpb24oKCkgPT4ge1xyXG4gICAgYXBpXHJcbiAgICAgIC5kZWxldGVDYXJkKGNhcmRJRClcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGNhcmQucmVtb3ZlQ2FyZCgpO1xyXG4gICAgICAgIGRlbGV0ZUNhcmRQb3B1cC5jbG9zZSgpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmRlbGV0ZUNhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy9FZGl0QXZhdGFyXHJcblxyXG5jb25zdCB1cGRhdGVBdmF0YXJGb3JtID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIjcHJvZmlsZS1pbWFnZS1tb2RhbFwiLCAoYXZhdGFyKSA9PiB7XHJcbiAgdXBkYXRlQXZhdGFyRm9ybS5zZXRMb2FkaW5nKHRydWUpO1xyXG4gIGFwaVxyXG4gICAgLnVwZGF0ZUF2YXRhcihhdmF0YXIubGluaylcclxuICAgIC50aGVuKCh1c2VyKSA9PiB7XHJcbiAgICAgIHVzZXJJbmZvLnNldEF2YXRhcih1c2VyLmF2YXRhcik7XHJcbiAgICAgIHVwZGF0ZUF2YXRhckZvcm0uY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9KVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICB1cGRhdGVBdmF0YXJGb3JtLnNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuY29uc3QgZWRpdFBlbmNpbEljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1idXR0b25cIik7XHJcblxyXG5lZGl0UGVuY2lsSWNvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIHVwZGF0ZUF2YXRhckZvcm0ub3BlbigpO1xyXG59KTtcclxuXHJcbnVwZGF0ZUF2YXRhckZvcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vYWRkQ2FyZFxyXG5cclxuY29uc3QgY2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIjYWRkLWNhcmQtbW9kYWxcIiwgaGFuZGxlQWRkQ2FyZEZvcm1TdWJtaXQpO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlQWRkQ2FyZEZvcm1TdWJtaXQoY2FyZERhdGEpIHtcclxuICBjYXJkUG9wdXAuc2V0TG9hZGluZyh0cnVlKTtcclxuICBhcGlcclxuICAgIC5hZGRDYXJkKGNhcmREYXRhKVxyXG4gICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkID0gcmVuZGVyQ2FyZChyZXMpO1xyXG4gICAgICBjYXJkU2VjdGlvbi5hZGRJdGVtKGNhcmQpO1xyXG4gICAgICBjYXJkUG9wdXAuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9KVxyXG5cclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgY2FyZFBvcHVwLnNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn1cclxuY2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vLyBmdW5jdGlvbiBoYW5kbGVBZGRDYXJkRm9ybVN1Ym1pdChpbnB1dFZhbHVlcykge1xyXG4vLyAgIHJlbmRlckNhcmQoaW5wdXRWYWx1ZXMpO1xyXG4vLyAgIHZhcmlhYmxlLmFkZENhcmRGb3JtLnJlc2V0KCk7XHJcbi8vICAgY2FyZEZvcm1Gb3JtVmFsaWRhdG9yLmNoYW5nZUJ1dHRvblN0YXRlKCk7XHJcbi8vICAgY2FyZFBvcHVwLmNsb3NlKCk7XHJcbi8vIH1cclxuIiwiZXhwb3J0IGNsYXNzIEFwaSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcclxuICAgICAgdGhpcy51cmwgPSBjb25maWcuYmFzZVVybDtcclxuICAgICAgdGhpcy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBnZXRJbml0aWFsQ2FyZHMoKSB7XHJcbiAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vY2FyZHNgLCB7XHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgYXV0aG9yaXphdGlvbjogXCJhNTE3MmQ3Ni03MjA2LTRiYjYtYjYwOS0yZThlMTdiODM3MjRcIixcclxuICAgICAgICB9LFxyXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgdGhlIHNlcnZlciByZXR1cm5zIGFuIGVycm9yLCByZWplY3QgdGhlIHByb21pc2VcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICAgIHJldHVybiBmZXRjaChcImh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxL3VzZXJzL21lXCIsIHtcclxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgYXV0aG9yaXphdGlvbjogXCJhNTE3MmQ3Ni03MjA2LTRiYjYtYjYwOS0yZThlMTdiODM3MjRcIixcclxuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgdXBkYXRlVXNlclByb2ZpbGUodXNlckRhdGEpIHtcclxuICAgICAgcmV0dXJuIGZldGNoKFwiaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjEvdXNlcnMvbWVcIiwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgIGF1dGhvcml6YXRpb246IFwiYTUxNzJkNzYtNzIwNi00YmI2LWI2MDktMmU4ZTE3YjgzNzI0XCIsXHJcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHVzZXJEYXRhKSxcclxuICAgICAgfSlcclxuICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICBcclxuICAgIHVwZGF0ZUF2YXRhcihhdmF0YXIpIHtcclxuICAgICAgcmV0dXJuIGZldGNoKFxyXG4gICAgICAgIGBodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MS91c2Vycy9tZS9hdmF0YXJgLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICBhdXRob3JpemF0aW9uOiBcImE1MTcyZDc2LTcyMDYtNGJiNi1iNjA5LTJlOGUxN2I4MzcyNFwiLFxyXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGF2YXRhciB9KSxcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICBcclxuICAgIGdldENhcmRzKG5hbWUsIGxpbmssIF9pZCkge1xyXG4gICAgICByZXR1cm4gZmV0Y2goYGh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxL2NhcmRzYCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgbGluazogbGluayxcclxuICAgICAgICAgIF9pZDogX2lkLFxyXG4gICAgICAgICAgYXV0aG9yaXphdGlvbjogXCJhNTE3MmQ3Ni03MjA2LTRiYjYtYjYwOS0yZThlMTdiODM3MjRcIixcclxuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBhZGRDYXJkKHsgbmFtZSwgbGluayB9KSB7XHJcbiAgICAgIHJldHVybiBmZXRjaChgaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjEvY2FyZHNgLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICBhdXRob3JpemF0aW9uOiBcImE1MTcyZDc2LTcyMDYtNGJiNi1iNjA5LTJlOGUxN2I4MzcyNFwiLFxyXG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgbGluazogbGluayxcclxuICAgICAgICB9KSxcclxuICAgICAgfSlcclxuICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICBcclxuICAgIGRlbGV0ZUNhcmQoY2FyZElEKSB7XHJcbiAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vY2FyZHMvJHtjYXJkSUR9YCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICBhdXRob3JpemF0aW9uOiBcImE1MTcyZDc2LTcyMDYtNGJiNi1iNjA5LTJlOGUxN2I4MzcyNFwiLFxyXG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSlcclxuICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICBcclxuICAgIGxpa2VDYXJkKGlkKSB7XHJcbiAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vY2FyZHMvJHtpZH0vbGlrZXNgLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgIGF1dGhvcml6YXRpb246IFwiYTUxNzJkNzYtNzIwNi00YmI2LWI2MDktMmU4ZTE3YjgzNzI0XCIsXHJcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICB9LFxyXG4gICAgICB9KVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZGlzbGlrZUNhcmQoaWQpIHtcclxuICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMudXJsfS9jYXJkcy8ke2lkfS9saWtlc2AsIHtcclxuICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgYXV0aG9yaXphdGlvbjogXCJhNTE3MmQ3Ni03MjA2LTRiYjYtYjYwOS0yZThlMTdiODM3MjRcIixcclxuICAgICAgICB9LFxyXG4gICAgICB9KVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICAiLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgICAgICB0aGlzLl9wb3B1cEltYWdlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlLXBvcHVwXCIpO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwVGl0bGUgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fdGl0bGUtcG9wdXBcIik7XHJcbiAgICB9XHJcbiAgICBvcGVuKHsgbmFtZSwgbGluayB9KSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBJbWFnZS5zcmMgPSBsaW5rO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gbmFtZTtcclxuICAgICAgICB0aGlzLl9wb3B1cFRpdGxlLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgICAgICBzdXBlci5vcGVuKCk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9maWxlVGl0bGUsIHByb2ZpbGVEZXNjcmlwdGlvbiwgYXZhdGFyU2VsZWN0b3IpIHtcclxuICAgICAgICB0aGlzLl90aXRsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByb2ZpbGVUaXRsZSk7XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb25FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9maWxlRGVzY3JpcHRpb24pO1xyXG4gICAgICAgIHRoaXMuX2F2YXRhckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGF2YXRhclNlbGVjdG9yKTtcclxuICAgIH1cclxuICBcclxuICAgIGdldFVzZXJJbmZvKCkge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJbmZvID0ge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLl90aXRsZUVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLl9kZXNjcmlwdGlvbkVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdXNlckluZm87XHJcbiAgICB9XHJcbiAgICBzZXRVc2VySW5mbyhuYW1lLCBkZXNjcmlwdGlvbikge1xyXG4gICAgICAgIHRoaXMuX3RpdGxlRWxlbWVudC50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gZGVzY3JpcHRpb247XHJcbiAgICB9XHJcbiAgICBzZXRBdmF0YXIoYXZhdGFyKSB7XHJcbiAgICAgICAgdGhpcy5fYXZhdGFyRWxlbWVudC5zcmMgPSBhdmF0YXI7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aENvbmZpcm1hdGlvbiBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG4gIH1cclxuXHJcbiAgX3NldENvbmZpcm1hdGlvbihhY3Rpb24pIHtcclxuICAgIHRoaXMuX3NldENvbmZpcm1hdGlvbiA9IGFjdGlvbjtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5fc2V0Q29uZmlybWF0aW9uKGUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbIkNhcmQiLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVJbWFnZUNsaWNrIiwiaGFuZGxlRGVsZXRlU3VibWl0IiwiaGFuZGxlTGlrZUNsaWNrIiwiY2FyZERhdGEiLCJ0aGlzIiwiX25hbWUiLCJuYW1lIiwiX2xpbmsiLCJsaW5rIiwiX2NhcmRJRCIsImNhcmRJRCIsIl9pZCIsIl9pc0xpa2VkIiwiaXNMaWtlZCIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9oYW5kbGVEZWxldGVTdWJtaXQiLCJfaGFuZGxlTGlrZUNsaWNrIiwiX2dldFRlbXBsYXRlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsIl9zZXRFdmVudExpc3RlbmVycyIsIl9saWtlQnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVMaWtlSWNvbiIsIl9jYXJkVHJhc2giLCJfY2FyZEltYWdlRWwiLCJfc2V0TGlrZXMiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJoYW5kbGVEZWxldGVCdXR0b24iLCJ0b2dnbGUiLCJfaGFuZGxlRGVsZXRlQ2FyZCIsIl9lbGVtZW50IiwiZ2V0VmlldyIsInNyYyIsImFsdCIsInRleHRDb250ZW50IiwiZ2V0SUQiLCJGb3JtVmFsaWRhdG9yIiwiZm9ybUVsIiwiY29uZmlnIiwiX2Zvcm1FbCIsIl9mb3JtU2VsZWN0b3IiLCJmb3JtU2VsZWN0b3IiLCJfaW5wdXRTZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJfc3VibWl0QnV0dG9uIiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbGVtZW50IiwiZXJyb3JFbGVtZW50IiwiaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9oaWRlSW5wdXRFcnJvciIsIl9jaGVja1ZhbGlkaXR5IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9kaXNhYmxlQnV0dG9uIiwiZGlzYWJsZWQiLCJjaGFuZ2VCdXR0b25TdGF0ZSIsImZvdW5kSW52YWxpZCIsIl9pbnB1dEVsZW1lbnRzIiwiZm9yRWFjaCIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJldmVudCIsImVuYWJsZVZhbGlkYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsIlBvcHVwIiwiX3JlZiIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXBFbGVtZW50Iiwib3BlbiIsIl9oYW5kbGVFc2NDbG9zZSIsImNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2dCIsImtleSIsInNldEV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0IiwiY29udGFpbnMiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX3BvcHVwRm9ybSIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX2lucHV0RWxzIiwiX3N1Ym1pdEJ1dHRvblRleHQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dFZhbHVlcyIsInZhbHVlIiwic2V0TG9hZGluZyIsImlzTG9hZGluZyIsInJlbmRlckxvYWRpbmciLCJpbWciLCJjcmVhdGVFbGVtZW50IiwiaW1hZ2VTcmMiLCJsb2FkSW1hZ2UiLCJpbWFnZSIsImFwcGVuZCIsIlNlY3Rpb24iLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJhZGRJdGVtIiwiZWxlbWVudCIsInByZXBlbmQiLCJjYXJkRm9ybSIsInByb2ZpbGVFZGl0TW9kYWwiLCJ2YXJpYWJsZSIsImNhcmRMaXN0RWwiLCJhZGRDYXJkRm9ybSIsInByb2ZpbGVFZGl0QnV0dG9uIiwicHJvZmlsZUNsb3NlQnV0dG9uIiwiYWRkQ2FyZENsb3NlQnV0dG9uIiwicHJvZmlsZVRpdGxlIiwicHJvZmlsZURlc2NyaXB0aW9uIiwiYWRkTmV3Q2FyZEJ1dHRvbiIsInByb2ZpbGVUaXRsZUlucHV0IiwicHJvZmlsZURlc2NyaXB0aW9uSW5wdXQiLCJjYXJkVGl0bGVJbnB1dCIsImNhcmRVcmxJbnB1dCIsInBvcHVwTW9kYWwiLCJwb3B1cEltYWdlIiwicG9wdXBUaXRsZSIsInBvcHVwSW1hZ2VNb2RhbENsb3NlIiwiYXBpIiwidXJsIiwiYmFzZVVybCIsImhlYWRlcnMiLCJnZXRJbml0aWFsQ2FyZHMiLCJmZXRjaCIsImF1dGhvcml6YXRpb24iLCJ0aGVuIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsImdldFVzZXJJbmZvIiwibWV0aG9kIiwidXBkYXRlVXNlclByb2ZpbGUiLCJ1c2VyRGF0YSIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJ1cGRhdGVBdmF0YXIiLCJhdmF0YXIiLCJnZXRDYXJkcyIsImFkZENhcmQiLCJkZWxldGVDYXJkIiwibGlrZUNhcmQiLCJkaXNsaWtlQ2FyZCIsInBvcHVwV2l0aEltYWdlIiwicmVuZGVyQ2FyZCIsImNhcmQiLCJjYXJkU2VjdGlvbiIsInByb2ZpbGVFZGl0TW9kYWxGb3JtVmFsaWRhdG9yIiwiY2FyZEZvcm1Gb3JtVmFsaWRhdG9yIiwiaGFuZGxlTGlrZUJ1dHRvbiIsImNhcmRQb3B1cCIsImVkaXRQb3B1cCIsInVzZXJJbmZvIiwic2V0VXNlckluZm8iLCJkZXNjcmlwdGlvbiIsImZpbmFsbHkiLCJ1c2VyIiwiX3BvcHVwSW1hZ2UiLCJfcG9wdXBUaXRsZSIsInNlbGVjdG9ycyIsImFib3V0Iiwic2V0QXZhdGFyIiwiYXZhdGFyU2VsZWN0b3IiLCJfdGl0bGVFbGVtZW50IiwiX2Rlc2NyaXB0aW9uRWxlbWVudCIsIl9hdmF0YXJFbGVtZW50IiwiZGVsZXRlQ2FyZFBvcHVwIiwiX3NldENvbmZpcm1hdGlvbiIsImFjdGlvbiIsImUiLCJzZXRTdWJtaXRBY3Rpb24iLCJyZW1vdmVDYXJkIiwibG9nIiwidXBkYXRlQXZhdGFyRm9ybSJdLCJzb3VyY2VSb290IjoiIn0=